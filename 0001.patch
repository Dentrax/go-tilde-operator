From 4fc3ddf0bd69d21eba55c6869796f9537834ff6c Mon Sep 17 00:00:00 2001
From: Dentrax <furkan.turkal@trendyol.com>
Date: Fri, 4 Jun 2021 14:21:49 +0300
Subject: [PATCH] cmd/compile: add Tilde (OCOM), deprecate XOR unary

Using ^x in other languages causes an invalid compile
and throws a syntax error. To be more align with the
usage of the ~ unary op just like in other languages,
it's had better to deprecate the usage of ^x.

This commit renames OBITNOT op to OCOM, since we
already use COM opcode in the assembly calls, in order to
do _bitwise not_ operations.

Signed-off-by: Dentrax <furkan.turkal@trendyol.com>
---
 src/cmd/compile/internal/escape/escape.go     |  6 ++---
 src/cmd/compile/internal/ir/expr.go           |  4 ++--
 src/cmd/compile/internal/ir/fmt.go            |  5 ++--
 src/cmd/compile/internal/ir/node.go           |  2 +-
 src/cmd/compile/internal/ir/op_string.go      | 10 ++++----
 src/cmd/compile/internal/noder/noder.go       |  9 +++----
 src/cmd/compile/internal/ssagen/ssa.go        | 20 ++++++++--------
 src/cmd/compile/internal/staticinit/sched.go  |  2 +-
 src/cmd/compile/internal/syntax/parser.go     |  2 +-
 src/cmd/compile/internal/typecheck/const.go   | 24 +++++++++----------
 src/cmd/compile/internal/typecheck/iexport.go |  2 +-
 src/cmd/compile/internal/typecheck/iimport.go |  2 +-
 .../compile/internal/typecheck/typecheck.go   |  2 +-
 .../compile/internal/typecheck/universe.go    |  2 +-
 src/cmd/compile/internal/walk/assign.go       |  2 +-
 src/cmd/compile/internal/walk/expr.go         |  2 +-
 src/cmd/compile/internal/walk/walk.go         |  2 +-
 test/fixedbugs/issue23587.go                  |  3 ++-
 test/used.go                                  |  2 +-
 19 files changed, 52 insertions(+), 51 deletions(-)

diff --git a/src/cmd/compile/internal/escape/escape.go b/src/cmd/compile/internal/escape/escape.go
index 3ac7ff1ebe..2429cc93e1 100644
--- a/src/cmd/compile/internal/escape/escape.go
+++ b/src/cmd/compile/internal/escape/escape.go
@@ -602,7 +602,7 @@ func (e *escape) exprSkipInit(k hole, n ir.Node) {
 		}
 		e.flow(k, e.oldLoc(n))
 
-	case ir.OPLUS, ir.ONEG, ir.OBITNOT, ir.ONOT:
+	case ir.OPLUS, ir.ONEG, ir.OCOM, ir.ONOT:
 		n := n.(*ir.UnaryExpr)
 		e.discard(n.X)
 	case ir.OADD, ir.OSUB, ir.OOR, ir.OXOR, ir.OMUL, ir.ODIV, ir.OMOD, ir.OLSH, ir.ORSH, ir.OAND, ir.OANDNOT, ir.OEQ, ir.ONE, ir.OLT, ir.OLE, ir.OGT, ir.OGE:
@@ -839,7 +839,7 @@ func (e *escape) unsafeValue(k hole, n ir.Node) {
 		} else {
 			e.discard(n.X)
 		}
-	case ir.OPLUS, ir.ONEG, ir.OBITNOT:
+	case ir.OPLUS, ir.ONEG, ir.OCOM:
 		n := n.(*ir.UnaryExpr)
 		e.unsafeValue(k, n.X)
 	case ir.OADD, ir.OSUB, ir.OOR, ir.OXOR, ir.OMUL, ir.ODIV, ir.OMOD, ir.OAND, ir.OANDNOT:
@@ -1977,7 +1977,7 @@ func mayAffectMemory(n ir.Node) bool {
 		n := n.(*ir.ConvExpr)
 		return mayAffectMemory(n.X)
 
-	case ir.OLEN, ir.OCAP, ir.ONOT, ir.OBITNOT, ir.OPLUS, ir.ONEG, ir.OALIGNOF, ir.OOFFSETOF, ir.OSIZEOF:
+	case ir.OLEN, ir.OCAP, ir.ONOT, ir.OCOM, ir.OPLUS, ir.ONEG, ir.OALIGNOF, ir.OOFFSETOF, ir.OSIZEOF:
 		n := n.(*ir.UnaryExpr)
 		return mayAffectMemory(n.X)
 
diff --git a/src/cmd/compile/internal/ir/expr.go b/src/cmd/compile/internal/ir/expr.go
index f70645f079..8a3419563b 100644
--- a/src/cmd/compile/internal/ir/expr.go
+++ b/src/cmd/compile/internal/ir/expr.go
@@ -670,7 +670,7 @@ func (n *UnaryExpr) SetOp(op Op) {
 	switch op {
 	default:
 		panic(n.no("SetOp " + op.String()))
-	case OBITNOT, ONEG, ONOT, OPLUS, ORECV,
+	case OCOM, ONEG, ONOT, OPLUS, ORECV,
 		OALIGNOF, OCAP, OCLOSE, OIMAG, OLEN, ONEW,
 		OOFFSETOF, OPANIC, OREAL, OSIZEOF,
 		OCHECKNIL, OCFUNC, OIDATA, OITAB, OSPTR, OVARDEF, OVARKILL, OVARLIVE:
@@ -920,7 +920,7 @@ func SameSafeExpr(l Node, r Node) bool {
 		r := r.(*StarExpr)
 		return SameSafeExpr(l.X, r.X)
 
-	case ONOT, OBITNOT, OPLUS, ONEG:
+	case ONOT, OCOM, OPLUS, ONEG:
 		l := l.(*UnaryExpr)
 		r := r.(*UnaryExpr)
 		return SameSafeExpr(l.X, r.X)
diff --git a/src/cmd/compile/internal/ir/fmt.go b/src/cmd/compile/internal/ir/fmt.go
index f2ae0f7606..a1e62799f8 100644
--- a/src/cmd/compile/internal/ir/fmt.go
+++ b/src/cmd/compile/internal/ir/fmt.go
@@ -41,7 +41,6 @@ var OpNames = []string{
 	OCASE:        "case",
 	OCLOSE:       "close",
 	OCOMPLEX:     "complex",
-	OBITNOT:      "^",
 	OCONTINUE:    "continue",
 	OCOPY:        "copy",
 	ODELETE:      "delete",
@@ -241,7 +240,7 @@ var OpPrec = []int{
 	OMETHEXPR:      8,
 	OPLUS:          7,
 	ONOT:           7,
-	OBITNOT:        7,
+	OCOM:           7,
 	ONEG:           7,
 	OADDR:          7,
 	ODEREF:         7,
@@ -870,7 +869,7 @@ func exprFmt(n Node, s fmt.State, prec int) {
 		n := n.(*MakeExpr)
 		fmt.Fprintf(s, "makeslicecopy(%v, %v, %v)", n.Type(), n.Len, n.Cap)
 
-	case OPLUS, ONEG, OBITNOT, ONOT, ORECV:
+	case OPLUS, ONEG, OCOM, ONOT, ORECV:
 		// Unary
 		n := n.(*UnaryExpr)
 		fmt.Fprintf(s, "%v", n.Op())
diff --git a/src/cmd/compile/internal/ir/node.go b/src/cmd/compile/internal/ir/node.go
index af559cc082..a50bdc868b 100644
--- a/src/cmd/compile/internal/ir/node.go
+++ b/src/cmd/compile/internal/ir/node.go
@@ -221,9 +221,9 @@ const (
 	OANDNOT      // X &^ Y
 	ONEW         // new(X); corresponds to calls to new in source code
 	ONOT         // !X
-	OBITNOT      // ^X
 	OPLUS        // +X
 	ONEG         // -X
+	OCOM		 // ~X
 	OOROR        // X || Y
 	OPANIC       // panic(X)
 	OPRINT       // print(List)
diff --git a/src/cmd/compile/internal/ir/op_string.go b/src/cmd/compile/internal/ir/op_string.go
index 405a0c6b3c..1d813f6c47 100644
--- a/src/cmd/compile/internal/ir/op_string.go
+++ b/src/cmd/compile/internal/ir/op_string.go
@@ -93,9 +93,9 @@ func _() {
 	_ = x[OANDNOT-82]
 	_ = x[ONEW-83]
 	_ = x[ONOT-84]
-	_ = x[OBITNOT-85]
-	_ = x[OPLUS-86]
-	_ = x[ONEG-87]
+	_ = x[OPLUS-85]
+	_ = x[ONEG-86]
+	_ = x[OCOM-87]
 	_ = x[OOROR-88]
 	_ = x[OPANIC-89]
 	_ = x[OPRINT-90]
@@ -165,9 +165,9 @@ func _() {
 	_ = x[OEND-154]
 }
 
-const _Op_name = "XXXNAMENONAMETYPEPACKLITERALNILADDSUBORXORADDSTRADDRANDANDAPPENDBYTES2STRBYTES2STRTMPRUNES2STRSTR2BYTESSTR2BYTESTMPSTR2RUNESSLICE2ARRPTRASAS2AS2DOTTYPEAS2FUNCAS2MAPRAS2RECVASOPCALLCALLFUNCCALLMETHCALLINTERCALLPARTCAPCLOSECLOSURECOMPLITMAPLITSTRUCTLITARRAYLITSLICELITPTRLITCONVCONVIFACECONVNOPCOPYDCLDCLFUNCDCLCONSTDCLTYPEDELETEDOTDOTPTRDOTMETHDOTINTERXDOTDOTTYPEDOTTYPE2EQNELTLEGEGTDEREFINDEXINDEXMAPKEYSTRUCTKEYLENMAKEMAKECHANMAKEMAPMAKESLICEMAKESLICECOPYMULDIVMODLSHRSHANDANDNOTNEWNOTBITNOTPLUSNEGORORPANICPRINTPRINTNPARENSENDSLICESLICEARRSLICESTRSLICE3SLICE3ARRSLICEHEADERRECOVERRECVRUNESTRSELRECV2IOTAREALIMAGCOMPLEXALIGNOFOFFSETOFSIZEOFUNSAFEADDUNSAFESLICEMETHEXPRBLOCKBREAKCASECONTINUEDEFERFALLFORFORUNTILGOTOIFLABELGORANGERETURNSELECTSWITCHTYPESWFUNCINSTTCHANTMAPTSTRUCTTINTERTFUNCTARRAYTSLICEINLCALLEFACEITABIDATASPTRCFUNCCHECKNILVARDEFVARKILLVARLIVERESULTINLMARKLINKSYMOFFSETTAILCALLGETGEND"
+const _Op_name = "XXXNAMENONAMETYPEPACKLITERALNILADDSUBORXORADDSTRADDRANDANDAPPENDBYTES2STRBYTES2STRTMPRUNES2STRSTR2BYTESSTR2BYTESTMPSTR2RUNESSLICE2ARRPTRASAS2AS2DOTTYPEAS2FUNCAS2MAPRAS2RECVASOPCALLCALLFUNCCALLMETHCALLINTERCALLPARTCAPCLOSECLOSURECOMPLITMAPLITSTRUCTLITARRAYLITSLICELITPTRLITCONVCONVIFACECONVNOPCOPYDCLDCLFUNCDCLCONSTDCLTYPEDELETEDOTDOTPTRDOTMETHDOTINTERXDOTDOTTYPEDOTTYPE2EQNELTLEGEGTDEREFINDEXINDEXMAPKEYSTRUCTKEYLENMAKEMAKECHANMAKEMAPMAKESLICEMAKESLICECOPYMULDIVMODLSHRSHANDANDNOTNEWNOTPLUSNEGCOMORORPANICPRINTPRINTNPARENSENDSLICESLICEARRSLICESTRSLICE3SLICE3ARRSLICEHEADERRECOVERRECVRUNESTRSELRECV2IOTAREALIMAGCOMPLEXALIGNOFOFFSETOFSIZEOFUNSAFEADDUNSAFESLICEMETHEXPRBLOCKBREAKCASECONTINUEDEFERFALLFORFORUNTILGOTOIFLABELGORANGERETURNSELECTSWITCHTYPESWFUNCINSTTCHANTMAPTSTRUCTTINTERTFUNCTARRAYTSLICEINLCALLEFACEITABIDATASPTRCFUNCCHECKNILVARDEFVARKILLVARLIVERESULTINLMARKLINKSYMOFFSETTAILCALLGETGEND"
 
-var _Op_index = [...]uint16{0, 3, 7, 13, 17, 21, 28, 31, 34, 37, 39, 42, 48, 52, 58, 64, 73, 85, 94, 103, 115, 124, 136, 138, 141, 151, 158, 165, 172, 176, 180, 188, 196, 205, 213, 216, 221, 228, 235, 241, 250, 258, 266, 272, 276, 285, 292, 296, 299, 306, 314, 321, 327, 330, 336, 343, 351, 355, 362, 370, 372, 374, 376, 378, 380, 382, 387, 392, 400, 403, 412, 415, 419, 427, 434, 443, 456, 459, 462, 465, 468, 471, 474, 480, 483, 486, 492, 496, 499, 503, 508, 513, 519, 524, 528, 533, 541, 549, 555, 564, 575, 582, 586, 593, 601, 605, 609, 613, 620, 627, 635, 641, 650, 661, 669, 674, 679, 683, 691, 696, 700, 703, 711, 715, 717, 722, 724, 729, 735, 741, 747, 753, 761, 766, 770, 777, 783, 788, 794, 800, 807, 812, 816, 821, 825, 830, 838, 844, 851, 858, 864, 871, 884, 892, 896, 899}
+var _Op_index = [...]uint16{0, 3, 7, 13, 17, 21, 28, 31, 34, 37, 39, 42, 48, 52, 58, 64, 73, 85, 94, 103, 115, 124, 136, 138, 141, 151, 158, 165, 172, 176, 180, 188, 196, 205, 213, 216, 221, 228, 235, 241, 250, 258, 266, 272, 276, 285, 292, 296, 299, 306, 314, 321, 327, 330, 336, 343, 351, 355, 362, 370, 372, 374, 376, 378, 380, 382, 387, 392, 400, 403, 412, 415, 419, 427, 434, 443, 456, 459, 462, 465, 468, 471, 474, 480, 483, 486, 490, 493, 496, 500, 505, 510, 516, 521, 525, 530, 538, 546, 552, 561, 572, 579, 583, 590, 598, 602, 606, 610, 617, 624, 632, 638, 647, 658, 666, 671, 676, 680, 688, 693, 697, 700, 708, 712, 714, 719, 721, 726, 732, 738, 744, 750, 758, 763, 767, 774, 780, 785, 791, 797, 804, 809, 813, 818, 822, 827, 835, 841, 848, 855, 861, 868, 881, 889, 893, 896}
 
 func (i Op) String() string {
 	if i >= Op(len(_Op_index)-1) {
diff --git a/src/cmd/compile/internal/noder/noder.go b/src/cmd/compile/internal/noder/noder.go
index 5fcad096c2..6e108bc1e9 100644
--- a/src/cmd/compile/internal/noder/noder.go
+++ b/src/cmd/compile/internal/noder/noder.go
@@ -1369,10 +1369,11 @@ var unOps = [...]ir.Op{
 	syntax.Mul:  ir.ODEREF,
 	syntax.And:  ir.OADDR,
 
-	syntax.Not: ir.ONOT,
-	syntax.Xor: ir.OBITNOT,
-	syntax.Add: ir.OPLUS,
-	syntax.Sub: ir.ONEG,
+	syntax.Not:   ir.ONOT,
+	syntax.Tilde: ir.OCOM,
+	syntax.Xor:   ir.OCOM,
+	syntax.Add:   ir.OPLUS,
+	syntax.Sub:   ir.ONEG,
 }
 
 func (p *noder) unOp(op syntax.Operator) ir.Op {
diff --git a/src/cmd/compile/internal/ssagen/ssa.go b/src/cmd/compile/internal/ssagen/ssa.go
index 004e084f72..ca87c69586 100644
--- a/src/cmd/compile/internal/ssagen/ssa.go
+++ b/src/cmd/compile/internal/ssagen/ssa.go
@@ -2052,14 +2052,14 @@ var opToSSA = map[opAndType]ssa.Op{
 	opAndType{ir.ONEG, types.TFLOAT32}: ssa.OpNeg32F,
 	opAndType{ir.ONEG, types.TFLOAT64}: ssa.OpNeg64F,
 
-	opAndType{ir.OBITNOT, types.TINT8}:   ssa.OpCom8,
-	opAndType{ir.OBITNOT, types.TUINT8}:  ssa.OpCom8,
-	opAndType{ir.OBITNOT, types.TINT16}:  ssa.OpCom16,
-	opAndType{ir.OBITNOT, types.TUINT16}: ssa.OpCom16,
-	opAndType{ir.OBITNOT, types.TINT32}:  ssa.OpCom32,
-	opAndType{ir.OBITNOT, types.TUINT32}: ssa.OpCom32,
-	opAndType{ir.OBITNOT, types.TINT64}:  ssa.OpCom64,
-	opAndType{ir.OBITNOT, types.TUINT64}: ssa.OpCom64,
+	opAndType{ir.OCOM, types.TINT8}:   ssa.OpCom8,
+	opAndType{ir.OCOM, types.TUINT8}:  ssa.OpCom8,
+	opAndType{ir.OCOM, types.TINT16}:  ssa.OpCom16,
+	opAndType{ir.OCOM, types.TUINT16}: ssa.OpCom16,
+	opAndType{ir.OCOM, types.TINT32}:  ssa.OpCom32,
+	opAndType{ir.OCOM, types.TUINT32}: ssa.OpCom32,
+	opAndType{ir.OCOM, types.TINT64}:  ssa.OpCom64,
+	opAndType{ir.OCOM, types.TUINT64}: ssa.OpCom64,
 
 	opAndType{ir.OIMAG, types.TCOMPLEX64}:  ssa.OpComplexImag,
 	opAndType{ir.OIMAG, types.TCOMPLEX128}: ssa.OpComplexImag,
@@ -2900,7 +2900,7 @@ func (s *state) expr(n ir.Node) *ssa.Value {
 		n := n.(*ir.BinaryExpr)
 		a := s.expr(n.X)
 		b := s.expr(n.Y)
-		b = s.newValue1(s.ssaOp(ir.OBITNOT, b.Type), b.Type, b)
+		b = s.newValue1(s.ssaOp(ir.OCOM, b.Type), b.Type, b)
 		return s.newValue2(s.ssaOp(ir.OAND, n.Type()), a.Type, a, b)
 	case ir.OLSH, ir.ORSH:
 		n := n.(*ir.BinaryExpr)
@@ -2976,7 +2976,7 @@ func (s *state) expr(n ir.Node) *ssa.Value {
 				s.newValue1(negop, tp, s.newValue1(ssa.OpComplexImag, tp, a)))
 		}
 		return s.newValue1(s.ssaOp(n.Op(), n.Type()), a.Type, a)
-	case ir.ONOT, ir.OBITNOT:
+	case ir.ONOT, ir.OCOM:
 		n := n.(*ir.UnaryExpr)
 		a := s.expr(n.X)
 		return s.newValue1(s.ssaOp(n.Op(), n.Type()), a.Type, a)
diff --git a/src/cmd/compile/internal/staticinit/sched.go b/src/cmd/compile/internal/staticinit/sched.go
index 0c97b6de74..ecc9af29b9 100644
--- a/src/cmd/compile/internal/staticinit/sched.go
+++ b/src/cmd/compile/internal/staticinit/sched.go
@@ -562,7 +562,7 @@ func AnySideEffects(n ir.Node) bool {
 			ir.OANDNOT,
 			ir.ONEW,
 			ir.ONOT,
-			ir.OBITNOT,
+			ir.OCOM,
 			ir.OPLUS,
 			ir.ONEG,
 			ir.OOROR,
diff --git a/src/cmd/compile/internal/syntax/parser.go b/src/cmd/compile/internal/syntax/parser.go
index e7b8840b33..32d2a387d7 100644
--- a/src/cmd/compile/internal/syntax/parser.go
+++ b/src/cmd/compile/internal/syntax/parser.go
@@ -753,7 +753,7 @@ func (p *parser) unaryExpr() Expr {
 	switch p.tok {
 	case _Operator, _Star:
 		switch p.op {
-		case Mul, Add, Sub, Not, Xor:
+		case Mul, Add, Sub, Not, Tilde, Xor:
 			x := new(Operation)
 			x.pos = p.pos()
 			x.Op = p.op
diff --git a/src/cmd/compile/internal/typecheck/const.go b/src/cmd/compile/internal/typecheck/const.go
index 5a35eeade9..31d98e0973 100644
--- a/src/cmd/compile/internal/typecheck/const.go
+++ b/src/cmd/compile/internal/typecheck/const.go
@@ -132,7 +132,7 @@ func convlit1(n ir.Node, t *types.Type, explicit bool, context func() string) ir
 		n.SetType(t)
 		return n
 
-	case ir.OPLUS, ir.ONEG, ir.OBITNOT, ir.ONOT, ir.OREAL, ir.OIMAG:
+	case ir.OPLUS, ir.ONEG, ir.OCOM, ir.ONOT, ir.OREAL, ir.OIMAG:
 		ot := operandType(n.Op(), t)
 		if ot == nil {
 			n = DefaultLit(n, nil)
@@ -360,10 +360,10 @@ func tostr(v constant.Value) constant.Value {
 }
 
 var tokenForOp = [...]token.Token{
-	ir.OPLUS:   token.ADD,
-	ir.ONEG:    token.SUB,
-	ir.ONOT:    token.NOT,
-	ir.OBITNOT: token.XOR,
+	ir.OPLUS: token.ADD,
+	ir.ONEG:  token.SUB,
+	ir.ONOT:  token.NOT,
+	ir.OCOM:  token.XOR,
 
 	ir.OADD:    token.ADD,
 	ir.OSUB:    token.SUB,
@@ -395,7 +395,7 @@ var tokenForOp = [...]token.Token{
 func EvalConst(n ir.Node) ir.Node {
 	// Pick off just the opcodes that can be constant evaluated.
 	switch n.Op() {
-	case ir.OPLUS, ir.ONEG, ir.OBITNOT, ir.ONOT:
+	case ir.OPLUS, ir.ONEG, ir.OCOM, ir.ONOT:
 		n := n.(*ir.UnaryExpr)
 		nl := n.X
 		if nl.Op() == ir.OLITERAL {
@@ -582,12 +582,12 @@ func square(x constant.Value) constant.Value {
 // For matching historical "constant OP overflow" error messages.
 // TODO(mdempsky): Replace with error messages like go/types uses.
 var overflowNames = [...]string{
-	ir.OADD:    "addition",
-	ir.OSUB:    "subtraction",
-	ir.OMUL:    "multiplication",
-	ir.OLSH:    "shift",
-	ir.OXOR:    "bitwise XOR",
-	ir.OBITNOT: "bitwise complement",
+	ir.OADD: "addition",
+	ir.OSUB: "subtraction",
+	ir.OMUL: "multiplication",
+	ir.OLSH: "shift",
+	ir.OXOR: "bitwise XOR",
+	ir.OCOM: "bitwise complement",
 }
 
 // OrigConst returns an OLITERAL with orig n and value v.
diff --git a/src/cmd/compile/internal/typecheck/iexport.go b/src/cmd/compile/internal/typecheck/iexport.go
index 64d68ef625..5ecd316079 100644
--- a/src/cmd/compile/internal/typecheck/iexport.go
+++ b/src/cmd/compile/internal/typecheck/iexport.go
@@ -1760,7 +1760,7 @@ func (w *exportWriter) expr(n ir.Node) {
 		}
 
 	// unary expressions
-	case ir.OPLUS, ir.ONEG, ir.OBITNOT, ir.ONOT, ir.ORECV:
+	case ir.OPLUS, ir.ONEG, ir.OCOM, ir.ONOT, ir.ORECV:
 		n := n.(*ir.UnaryExpr)
 		w.op(n.Op())
 		w.pos(n.Pos())
diff --git a/src/cmd/compile/internal/typecheck/iimport.go b/src/cmd/compile/internal/typecheck/iimport.go
index a5ddbb5a74..cd5244fa6e 100644
--- a/src/cmd/compile/internal/typecheck/iimport.go
+++ b/src/cmd/compile/internal/typecheck/iimport.go
@@ -1344,7 +1344,7 @@ func (r *importReader) node() ir.Node {
 		return n
 
 	// unary expressions
-	case ir.OPLUS, ir.ONEG, ir.OBITNOT, ir.ONOT, ir.ORECV:
+	case ir.OPLUS, ir.ONEG, ir.OCOM, ir.ONOT, ir.ORECV:
 		n := ir.NewUnaryExpr(r.pos(), op, r.expr())
 		if go117ExportTypes {
 			n.SetType(r.typ())
diff --git a/src/cmd/compile/internal/typecheck/typecheck.go b/src/cmd/compile/internal/typecheck/typecheck.go
index 95f7b50259..6e7a4d7693 100644
--- a/src/cmd/compile/internal/typecheck/typecheck.go
+++ b/src/cmd/compile/internal/typecheck/typecheck.go
@@ -671,7 +671,7 @@ func typecheck1(n ir.Node, top int) ir.Node {
 		n.SetType(t)
 		return n
 
-	case ir.OBITNOT, ir.ONEG, ir.ONOT, ir.OPLUS:
+	case ir.OCOM, ir.ONEG, ir.ONOT, ir.OPLUS:
 		n := n.(*ir.UnaryExpr)
 		return tcUnaryArith(n)
 
diff --git a/src/cmd/compile/internal/typecheck/universe.go b/src/cmd/compile/internal/typecheck/universe.go
index de185ab944..67a251c369 100644
--- a/src/cmd/compile/internal/typecheck/universe.go
+++ b/src/cmd/compile/internal/typecheck/universe.go
@@ -312,7 +312,7 @@ func InitUniverse() {
 	okfor[ir.ORSH] = okforand[:]
 
 	// unary
-	okfor[ir.OBITNOT] = okforand[:]
+	okfor[ir.OCOM] = okforand[:]
 	okfor[ir.ONEG] = okforarith[:]
 	okfor[ir.ONOT] = okforbool[:]
 	okfor[ir.OPLUS] = okforarith[:]
diff --git a/src/cmd/compile/internal/walk/assign.go b/src/cmd/compile/internal/walk/assign.go
index 6d697a53ae..b99cadbd7d 100644
--- a/src/cmd/compile/internal/walk/assign.go
+++ b/src/cmd/compile/internal/walk/assign.go
@@ -426,7 +426,6 @@ func readsMemory(n ir.Node) bool {
 		ir.OAND,
 		ir.OANDAND,
 		ir.OANDNOT,
-		ir.OBITNOT,
 		ir.OCONV,
 		ir.OCONVIFACE,
 		ir.OCONVNOP,
@@ -438,6 +437,7 @@ func readsMemory(n ir.Node) bool {
 		ir.OMOD,
 		ir.OMUL,
 		ir.ONEG,
+		ir.OCOM,
 		ir.ONIL,
 		ir.OOR,
 		ir.OOROR,
diff --git a/src/cmd/compile/internal/walk/expr.go b/src/cmd/compile/internal/walk/expr.go
index 2fb907710b..dabed6104a 100644
--- a/src/cmd/compile/internal/walk/expr.go
+++ b/src/cmd/compile/internal/walk/expr.go
@@ -97,7 +97,7 @@ func walkExpr1(n ir.Node, init *ir.Nodes) ir.Node {
 		n := n.(*ir.SelectorExpr)
 		return n.FuncName()
 
-	case ir.ONOT, ir.ONEG, ir.OPLUS, ir.OBITNOT, ir.OREAL, ir.OIMAG, ir.OSPTR, ir.OITAB, ir.OIDATA:
+	case ir.ONOT, ir.ONEG, ir.OPLUS, ir.OCOM, ir.OREAL, ir.OIMAG, ir.OSPTR, ir.OITAB, ir.OIDATA:
 		n := n.(*ir.UnaryExpr)
 		n.X = walkExpr(n.X, init)
 		return n
diff --git a/src/cmd/compile/internal/walk/walk.go b/src/cmd/compile/internal/walk/walk.go
index fe2c62cd4f..f7826a26b9 100644
--- a/src/cmd/compile/internal/walk/walk.go
+++ b/src/cmd/compile/internal/walk/walk.go
@@ -339,7 +339,7 @@ func mayCall(n ir.Node) bool {
 
 		case ir.OLITERAL, ir.ONIL, ir.ONAME, ir.OLINKSYMOFFSET, ir.OMETHEXPR,
 			ir.OAND, ir.OANDNOT, ir.OLSH, ir.OOR, ir.ORSH, ir.OXOR, ir.OCOMPLEX, ir.OEFACE,
-			ir.OADDR, ir.OBITNOT, ir.ONOT, ir.OPLUS,
+			ir.OADDR, ir.OCOM, ir.ONOT, ir.OPLUS,
 			ir.OCAP, ir.OIMAG, ir.OLEN, ir.OREAL,
 			ir.OCONVNOP, ir.ODOT,
 			ir.OCFUNC, ir.OIDATA, ir.OITAB, ir.OSPTR,
diff --git a/test/fixedbugs/issue23587.go b/test/fixedbugs/issue23587.go
index 2308992347..64ac818012 100644
--- a/test/fixedbugs/issue23587.go
+++ b/test/fixedbugs/issue23587.go
@@ -7,7 +7,8 @@
 package p
 
 func _(x int) {
-	_ = ~x    // ERROR "unexpected ~"
+	_ = ~x
+	_ = x~ // ERROR "unexpected ~ at end of statement"
 }
 
 func _(x int) {
diff --git a/test/used.go b/test/used.go
index 5bdc5a7318..cdefa2b335 100644
--- a/test/used.go
+++ b/test/used.go
@@ -111,7 +111,7 @@ func _() {
 	x &^ x                 // ERROR "x &\^ x .* not used"
 	new(int)               // ERROR "new\(int\) .* not used"
 	!b                     // ERROR "!b .* not used"
-	^x                     // ERROR "\^x .* not used"
+	^x                     // ERROR "COMx evaluated but not used|is not used"
 	+x                     // ERROR "\+x .* not used"
 	-x                     // ERROR "-x .* not used"
 	b || b                 // ERROR "b \|\| b .* not used"
-- 
2.31.1

